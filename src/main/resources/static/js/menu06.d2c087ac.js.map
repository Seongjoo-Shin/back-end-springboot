{"version":3,"file":"js/menu06.d2c087ac.js","mappings":"yiBA8BA,MAAMA,GAAQC,EAAAA,EAAAA,MAEd,SAASC,IACP,OAAOF,EAAMG,MAAMC,OAIrB,MAAMC,GAAiBC,EAAAA,EAAAA,KAAS,IAEvBN,EAAMO,QAAQL,YAGjBE,GAASI,EAAAA,EAAAA,IAAI,IAEnB,SAASC,IACPT,EAAMU,OAAO,YAAaN,EAAOO,OAGnC,SAASC,IACPZ,EAAMa,SAAS,mBAAoB,CAACT,OAAQA,EAAOO,MAAOG,SAAU,S,0iCC9CtE,MAAMC,EAAc,EAEpB,S,odC0BA,MAAMf,GAAQC,EAAAA,EAAAA,MAEd,SAASe,IACP,OAAOhB,EAAMG,MAAMc,QAAQC,MAM7B,MAAMC,GAAgBb,EAAAA,EAAAA,KAAS,IAEtBN,EAAMO,QAAQ,sBAGvB,SAASa,IACPpB,EAAMU,OAAO,mBAAoBC,EAAMA,OAGzC,SAASU,IACPrB,EAAMa,SAAS,0BAA2B,CAACF,MAAOA,EAAMA,MAAOG,SAAU,MAG3E,MAAMH,GAAQH,EAAAA,EAAAA,IAAI,G,wqCClDlB,MAAMO,EAAc,EAEpB","sources":["webpack://front-end-vue/./src/views/menu06/Exam01RootState.vue","webpack://front-end-vue/./src/views/menu06/Exam01RootState.vue?67d7","webpack://front-end-vue/./src/views/menu06/Exam02CounterState.vue","webpack://front-end-vue/./src/views/menu06/Exam02CounterState.vue?779f"],"sourcesContent":["<template>\r\n  <div class=\"card\">\r\n    <div class=\"card-header\">\r\n      Exam01RootState\r\n    </div>\r\n    <div class=\"card-body\">\r\n      <div>\r\n        <h6>[Root State 읽기]</h6>\r\n        <p>userId 단방향 바인딩 : {{$store.state.userId}} ($store.state.userId)</p> <!-- $store는 store/index.js에서 createStore가 만든 객체-->\r\n        <p>userId 단방향 바인딩 : {{store.state.userId}} (store.state.userId) </p>\r\n        <p>userId 단방향 바인딩 : {{store.getters.getUserId}} (store.getters.getUserId) </p>\r\n        <p>userId 단방향 바인딩 : {{getUserId()}} (getUserId())</p>\r\n        <p>userId 단방향 바인딩 : {{computedUserId}} (computed 속성 사용)</p>\r\n        <p>userId 양방향 바인딩 : <input type=\"text\" v-model=\"$store.state.userId\"/> (v-model 사용)</p> <!-- 양방향 바인딩 이므로 루트 상태를 바꿈 -->\r\n      </div>\r\n      <hr/>\r\n      <h6>[Root State 변경]</h6>\r\n      <p>userId 변경값 입력 : <input type=\"text\" v-model=\"userId\"/></p>\r\n      <div>\r\n        <button @click=\"ChangeUserIdByMutation\" class=\"btn btn-info btn-sm mr-2\">userId 변경 (Mutation 동기 방식)</button>\r\n        <button @click=\"ChangeUserIdByAction\" class=\"btn btn-info btn-sm mr-2\">userId 변경 (Action 비동기 방식)</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { useStore } from \"vuex\";\r\nimport { ref, computed } from \"vue\";\r\n\r\nconst store = useStore();\r\n\r\nfunction getUserId(){\r\n  return store.state.userId;\r\n  // return store.getters.getUserId;\r\n}\r\n\r\nconst computedUserId = computed(() => {\r\n  // return store.state.userId;\r\n  return store.getters.getUserId;\r\n});\r\n\r\nconst userId = ref(\"\");\r\n\r\nfunction ChangeUserIdByMutation() {\r\n  store.commit(\"setUserId\", userId.value);\r\n}\r\n\r\nfunction ChangeUserIdByAction() {\r\n  store.dispatch(\"setUserIdByAsync\", {userId: userId.value, duration: 300036});\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n</style>","import script from \"./Exam01RootState.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Exam01RootState.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"card\">\r\n    <div class=\"card-header\">\r\n      Exam02CounterState\r\n    </div>\r\n    <div class=\"card-body\">\r\n      <div>\r\n        <h6>[Counter State 읽기]</h6>\r\n        <p>counter/count 단방향 바인딩 : {{$store.state.counter.count}} ($store.state.counter.count)</p> <!-- $store는 store/index.js에서 createStore가 만든 객체-->\r\n        <p>counter/count 단방향 바인딩 : {{store.state.counter.count}} (store.state.counter.count)</p>\r\n        <!-- namespaced가 true로 설정되어 counter/getCount로 생성이 됨 -->\r\n        <p>counter/count 단방향 바인딩 : {{store.getters[\"counter/getCount\"]}} (store.getters[\"counter/getCount\"])</p>\r\n        <p>counter/count 단방향 바인딩 : {{getCount()}} (getCount())</p>\r\n        <p>counter/count 단방향 바인딩 : {{computedCount}} (computedCount)</p>\r\n        <p>counter/count 양방향 바인딩 : <input type=\"text\" v-model=\"$store.state.counter.count\"/> (v-model 사용)</p> <!-- 양방향 바인딩 이므로 루트 상태를 바꿈 -->\r\n      </div>\r\n      <hr/>\r\n      <h6>[Counter State 변경]</h6>\r\n      <p>count 증가값 입력 : <input type=\"text\" v-model.number=\"value\"/></p>\r\n      <div>\r\n        <button @click=\"ChangeCountByMutation\" class=\"btn btn-info btn-sm mr-2\">counter/count 변경 (Mutation 동기 방식)</button>\r\n        <button @click=\"ChangeCountByAction\" class=\"btn btn-info btn-sm mr-2\">counter/count 변경 (Action 비동기 방식)</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { useStore } from \"vuex\";\r\nimport { computed, ref } from \"vue\";\r\n\r\nconst store = useStore();\r\n\r\nfunction getCount() {\r\n  return store.state.counter.count;\r\n  // return store.getters[\"counter/getCount\"];\r\n}\r\n// function 보다는 computed 속성을 사용하는 것이 좋음\r\n// 컴포넌트의 속성이 바뀌면서 템플릿이 리로드 될 때 메소드는 계속 반복해서 실행을 하게 됨\r\n// computed는 이전값과 변함이 없다면 다시 실행되지 않기 때문에 더 효율적임\r\nconst computedCount = computed(() => {\r\n  // return store.state.counter.count;\r\n  return store.getters[\"counter/getCount\"];\r\n});\r\n\r\nfunction ChangeCountByMutation() {\r\n  store.commit(\"counter/setCount\", value.value);\r\n}\r\n\r\nfunction ChangeCountByAction() {\r\n  store.dispatch(\"counter/setCountByAsync\", {value: value.value, duration: 3000});\r\n}\r\n\r\nconst value = ref(1);\r\n</script>\r\n\r\n<style scoped>\r\n</style>","import script from \"./Exam02CounterState.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./Exam02CounterState.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["store","useStore","getUserId","state","userId","computedUserId","computed","getters","ref","ChangeUserIdByMutation","commit","value","ChangeUserIdByAction","dispatch","duration","__exports__","getCount","counter","count","computedCount","ChangeCountByMutation","ChangeCountByAction"],"sourceRoot":""}